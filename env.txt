pip install virtualenv = permet d'installer le package pour créer les environnement virtuel 
virtualenv nom_env = permet de créer un environnement virtuel
cd env/scripts = l'activation se trouve dans scripts
source activate = permet d'activer l'environnement virtuel
deactivate = permet de de désactiver
pip install django = permet d'installer django
pip list = permet de voir la list des package installer

pip install pillow = c'est une package qui permet de manipuler des images de différent format
pip install djangorestframework = (DRF) fournit une boite a outil complète pour créer des API Web RESTful
pip install django-cors-headers = permet de gérer les demandes CORS(Crosing Oringin Ressource Sharing)dans django
    #permet de contourner cette limitation (les nav web empêche les demandes de ressource d'origin différent) en ajoutant les en têtes CORS approprié au réponse de votre serveur
pip install fastapi uvicorn = permet d'installer 2 package fastapi et uvicorn
    # fastapi: pour construire des API avec une performance élevé. permet de créer des API RESTful, géré auto la validation des données,...
    # uvicorn: est un serveur HTTP asynchrone. permettre une traitement async des demandes HTTP entrant
pip install harperdb : permet d'installer la package de BD harperdb

pip freeze > requirement.txt = permet de générer un fichier texte contenant une liste de toutes les bibliothèques Python et leur version utilisé dans le projet
    # Le signe '>' est utilisé pour rédiger la sortie vers un fichier au lieu de l'afficher sur le console

Utilisation django: 
    django-admin <command>
    manage.py <command>
    python -m django <command>

django-admin version = pour afficher la version de django
python -m django --version = pour afficher la version de django
django-admin startproject nom_projet . = permet de lancer le projet Django et de mettre le manage.py en même niveau que l'env
python manage.py runserver = permet de lancer le server dans le lien http://127.0.0.1:8000/
python manage.py startapp nom_app = permet de creer un dossier qui contient des fichier de l'app
python manage.py migrate = applique les migration en attente pour synschroniser la base de donnés avec les modèles définis (applique ces modifications a la base de donnés)
python manage.py makemigrations = génère les fichier de migration a partir de la modifications de modèle
python manage.py createsuperuser = permet de créer une administration sur django(username et password) dans /admin

uvicorn main:app --reload = permet de lancer un serveur web pour l'application fastAPI nommé 'app'
    # --reload = permet de recharger auto l'application lorsqu'un changement est detecté dans le code source